/*
 * Copyright 2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
dependencies {
    compile libraries.groovy
    compile project(':core')
    compile project(':plugins')
    compile project(':wrapper')
    integTestRuntime project(':maven')
    integTestRuntime project(':scala')
}


task generateTemplateVersionFile(type: GenerateVersionProperties) {
    outputFile = file("src/main/generated-resources/org/gradle/buildinit/tasks/templates/library-versions.properties")
    library 'org.scalatest:scalatest_2.10:+'
    library 'org.scala-lang:scala-library:2.10.+'
    library 'org.codehaus.groovy:groovy-all:2.+'
    library 'junit:junit:4.+'
}

sourceSets.main.resources.srcDir file("src/main/generated-resources")
processResources.dependsOn generateTemplateVersionFile

eclipseClasspath.dependsOn generateTemplateVersionFile
ideaModule.dependsOn generateTemplateVersionFile

class GenerateVersionProperties extends DefaultTask {

    @OutputFile
    File outputFile

    @Input
    def libraryDefinitions = []

    @TaskAction
    void generateFile() {
        resolveFiles()
    }

    def resolveFiles() {
        def libDependencies = libraryDefinitions.collect { project.dependencies.create(it) }
        def templateVersionConfiguration = project.configurations.detachedConfiguration(libDependencies.toArray(new Dependency[libDependencies.size()]))
        templateVersionConfiguration.transitive = false
        outputFile.withWriter { writer ->
            templateVersionConfiguration.incoming.afterResolve { ResolvableDependencies deps ->
                deps.resolutionResult.allDependencies.each { ResolvedDependencyResult result ->
                    writer.append("${result.selected.id.name}=${result.selected.id.version}\n")
                }
            }
            templateVersionConfiguration.resolve()
        }
    }

    def library(Object dependencyNotation) {
        libraryDefinitions << dependencyNotation
    }
}


useTestFixtures()
useClassycle()
